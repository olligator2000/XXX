import re
import schedule
import time
from datetime import date, timedelta
import telebot
import requests
from telebot.types import ReplyKeyboardMarkup, KeyboardButton


BOT_API = "7770590397:AAHBSzmBrZLiZxYe5JJHTh-2QvTm2K1I3r8"
NEWS_API_KEY = "pub_740976a50713043bac6ec9aa65409f1ec42e6"

bot = telebot.TeleBot(BOT_API)

today = date.today()
yesterday = today - timedelta(days=1)
formatted_date_today = today.strftime("%Y-%m-%d")
formatted_date_yesterday = yesterday.strftime("%Y-%m-%d")


def main_menu():
    markup = ReplyKeyboardMarkup(row_width=2)
    button_1 = KeyboardButton("‚è±–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
    button_2 = KeyboardButton("üóù–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
    button_3 = KeyboardButton("‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã")
    button_4 = KeyboardButton("‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–µ–º")
    button_5 = KeyboardButton("üì¨–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ")
    button_6 = KeyboardButton("üü¢–í–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π")
    button_7 = KeyboardButton("‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    button_8 = KeyboardButton("üî¥–í—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π")
    markup.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8)
    return markup


def main_menu_subscription_on():
    markup = ReplyKeyboardMarkup(row_width=3)
    button_1 = KeyboardButton("üîù–¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏‚úÖ")
    button_2 = KeyboardButton("üíÉ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ‚úÖ")
    button_3 = KeyboardButton("üí∞–ë–∏–∑–Ω–µ—Å‚úÖ")
    button_4 = KeyboardButton("‚öΩ–°–ø–æ—Ä—Ç‚úÖ")
    button_5 = KeyboardButton("üìà–≠–∫–æ–Ω–æ–º–∏–∫–∞‚úÖ")
    button_6 = KeyboardButton("üá∑üá∫–ü–æ–ª–∏—Ç–∏–∫–∞‚úÖ")
    button_7 = KeyboardButton("üß¨–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏‚úÖ")
    button_8 = KeyboardButton("üåç–ú–∏—Ä‚úÖ")
    markup.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8)
    return markup


def main_menu_subscription_off():
    markup = ReplyKeyboardMarkup(row_width=3)
    button_1 = KeyboardButton("üîù–¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏‚ùå")
    button_2 = KeyboardButton("üíÉ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ‚ùå")
    button_3 = KeyboardButton("üí∞–ë–∏–∑–Ω–µ—Å‚ùå")
    button_4 = KeyboardButton("‚öΩ–°–ø–æ—Ä—Ç‚ùå")
    button_5 = KeyboardButton("üìà–≠–∫–æ–Ω–æ–º–∏–∫–∞‚ùå")
    button_6 = KeyboardButton("üá∑üá∫–ü–æ–ª–∏—Ç–∏–∫–∞‚ùå")
    button_7 = KeyboardButton("üß¨–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏‚ùå")
    button_8 = KeyboardButton("üåç–ú–∏—Ä‚ùå")
    markup.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8)
    return markup


def escape_markdown(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üì∞*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.*üì∞\n"
                                      "*–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:ü§î\n*", reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == "‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã")
def subscription(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n", reply_markup=main_menu_subscription_on())


@bot.message_handler(func=lambda message: message.text == "‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–µ–º")
def subscription(message):
    global list_subscriptions
    global list_schedule
    not_subscription = [False, False, False, False, False, False, False, False]
    if not_subscription == list_subscriptions:
        bot.send_message(message.chat.id, '*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã!*üòâ', reply_markup=main_menu(),
                         parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n", reply_markup=main_menu_subscription_off())


list_schedule = False


@bot.message_handler(func=lambda message: message.text == "üü¢–í–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π")
def auto_news(message):
    global list_subscriptions
    global list_schedule
    not_subscription = [False, False, False, False, False, False, False, False]
    if not_subscription == list_subscriptions:
        bot.send_message(message.chat.id, '*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã!*üòâ', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        if list_schedule is False:
            list_schedule = True
            bot.send_message(message.chat.id, f'*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤–∫–ª—é—á–µ–Ω–∞!*üü¢', parse_mode="Markdown")
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            schedule.every(30).seconds.do(time_schedule)  # –ö–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
            # schedule.every().day.at("9:00").do(my_function)  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
            while list_schedule:
                schedule.run_pending()
                time.sleep(1)
        else:
            bot.send_message(message.chat.id, '*–£–∂–µ –≤–∫–ª—é—á–µ–Ω–∞!*üôÑ', parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == "üî¥–í—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π")
def auto_news(message):
    global list_schedule
    if list_schedule is True:
        list_schedule = False
        bot.send_message(message.chat.id, f'*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞!*üî¥', parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '*–£–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–∞!*üôÑ', parse_mode="Markdown")


def time_schedule():
    global list_subscriptions
    top, entertainment, business, sports, economics, politics, technology, world = list_subscriptions
    url = f'https://newsdata.io/api/1/latest?apikey={NEWS_API_KEY}'
    response = requests.get(url).json()
    keys = response["results"]
    not_keys = []
    count = 0
    not_subscription = [False, False, False, False, False, False, False, False]
    if not_subscription == list_subscriptions:
        bot.send_message(chat_id="484938227", text="*–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É!*üòû", reply_markup=main_menu(), parse_mode="Markdown")
    else:
        if keys == not_keys:
            bot.send_message(chat_id="484938227", text="*–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!*üòû", reply_markup=main_menu(),
                             parse_mode="Markdown")
        else:
            for i in range(len(keys)):
                try:
                    if keys[i]["category"] == ["top" if top is True else False] \
                            or keys[i]["category"] == ["entertainment" if entertainment is True else False] \
                            or keys[i]["category"] == ["business" if business is True else False] \
                            or keys[i]["category"] == ["sports" if sports is True else False] \
                            or keys[i]["category"] == ["economics" if economics is True else False] \
                            or keys[i]["category"] == ["politics" if politics is True else False] \
                            or keys[i]["category"] == ["technology" if technology is True else False] \
                            or keys[i]["category"] == ["world" if world is True else False]:
                        count += 1
                        article_info = (
                            f'‚úíÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏: {keys[i]["title"]}\n'
                            f'üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫: {keys[i]["link"]}\n'
                            f'¬©Ô∏è–ê–≤—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏: {keys[i]["creator"]}\n'
                            f'üóìÔ∏è–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {keys[i]["pubDate"]}\n'
                            f'üìå–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {keys[i]["category"]}\n'
                        )
                        poster = keys[i]["image_url"]
                        if poster and poster is not None:
                            bot.send_photo(chat_id="484938227", photo=poster, caption=article_info)
                        else:
                            bot.send_message(chat_id="484938227", text=article_info)
                except Exception as e:
                    print(e)
                    continue
    if count == 0:
        bot.send_message(chat_id="484938227", text="*–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!*üòûüòûüòû", reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == "‚è±–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
def handle_buttons(message):
    url = f'https://newsdata.io/api/1/latest?apikey={NEWS_API_KEY}'
    response = requests.get(url).json()
    keys = response["results"]
    not_keys = []
    count = 0
    if keys == not_keys:
        bot.send_message(message.chat.id, "*–ü–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!*üòû", parse_mode="Markdown")
    else:
        for i in range(len(keys)):
            try:
                dt_string = keys[i]["pubDate"]
                if dt_string[:10] == formatted_date_today or dt_string[:10] == formatted_date_yesterday:
                    count += 1
                    article_info = (
                        f'‚úíÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏: {keys[i]["title"]}\n'
                        f'üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫: {keys[i]["link"]}\n'
                        f'¬©Ô∏è–ê–≤—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏: {keys[i]["creator"]}\n'
                        f'üóìÔ∏è–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {keys[i]["pubDate"]}\n'
                        f'üìå–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {keys[i]["category"]}\n'
                    )
                    poster = keys[i]["image_url"]
                    if poster and poster is not None:
                        bot.send_photo(message.chat.id, poster, caption=article_info)
                    else:
                        bot.send_message(message.chat.id, article_info)
            except Exception as e:
                print(e)
                continue
    if count == 0:
        bot.send_message(message.chat.id, "*–ü–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!*üòû", parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == "üóù–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
def handle_buttons(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(message, send_news)


def send_news(message):
    key_word = message.text
    url = f'https://newsdata.io/api/1/latest?q={key_word}&apikey={NEWS_API_KEY}'
    response = requests.get(url).json()
    keys = response["results"]
    not_keys = []
    if keys == not_keys:
        bot.send_message(message.chat.id, "*–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!*üòû", reply_markup=main_menu(), parse_mode="Markdown")
    else:
        for i in range(len(keys)):
            try:
                article_info = (
                    f'‚úíÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏: {keys[i]["title"]}\n'
                    f'üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫: {keys[i]["link"]}\n'
                    f'¬©Ô∏è–ê–≤—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏: {keys[i]["creator"]}\n'
                    f'üóìÔ∏è–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {keys[i]["pubDate"]}\n'
                    f'üìå–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {keys[i]["category"]}\n'
                )
                poster = keys[i]["image_url"]
                if poster and poster is not None:
                    bot.send_photo(message.chat.id, poster, caption=article_info)
                else:
                    bot.send_message(message.chat.id, article_info)
            except Exception as e:
                print(e)
                continue


@bot.message_handler(func=lambda message: message.text == "üì¨–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ")
def give_news_subscription(message):
    global list_subscriptions
    top, entertainment, business, sports, economics, politics, technology, world = list_subscriptions
    url = f'https://newsdata.io/api/1/latest?apikey={NEWS_API_KEY}'
    response = requests.get(url).json()
    keys = response["results"]
    not_keys = []
    count = 0
    not_subscription = [False, False, False, False, False, False, False, False]
    if not_subscription == list_subscriptions:
        bot.send_message(message.chat.id, "*–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É!*üòû", parse_mode="Markdown")
    else:
        if keys == not_keys:
            bot.send_message(message.chat.id, "*–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!*üòû", reply_markup=main_menu(),
                             parse_mode="Markdown")
        else:
            for i in range(len(keys)):
                try:
                    if keys[i]["category"] == ["top" if top is True else False] \
                            or keys[i]["category"] == ["entertainment" if entertainment is True else False] \
                            or keys[i]["category"] == ["business" if business is True else False] \
                            or keys[i]["category"] == ["sports" if sports is True else False] \
                            or keys[i]["category"] == ["economics" if economics is True else False] \
                            or keys[i]["category"] == ["politics" if politics is True else False] \
                            or keys[i]["category"] == ["technology" if technology is True else False] \
                            or keys[i]["category"] == ["world" if world is True else False]:
                        count += 1
                        article_info = (
                            f'‚úíÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏: {keys[i]["title"]}\n'
                            f'üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫: {keys[i]["link"]}\n'
                            f'¬©Ô∏è–ê–≤—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏: {keys[i]["creator"]}\n'
                            f'üóìÔ∏è–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {keys[i]["pubDate"]}\n'
                            f'üìå–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {keys[i]["category"]}\n'
                        )
                        poster = keys[i]["image_url"]
                        if poster and poster is not None:
                            bot.send_photo(message.chat.id, poster, caption=article_info)
                        else:
                            bot.send_message(message.chat.id, article_info)
                except Exception as e:
                    print(e)
                    continue
        if count == 0:
            bot.send_message(message.chat.id, "*–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!*üòû", reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üîù–¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏‚úÖ')
def start(message):
    global list_subscriptions
    if list_subscriptions[0] is False:
        list_subscriptions[0] = True
        bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!*üîî', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '*–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!ü§∑‚Äç‚ôÇÔ∏è*', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üîù–¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏‚ùå')
def start(message):
    global list_subscriptions
    global list_schedule
    if list_schedule is True:
        bot.send_message(message.chat.id, f'*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—ã–∫–ª –∞–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫—É!*‚òù', reply_markup=main_menu(),
                         parse_mode="Markdown")
    else:
        if list_subscriptions[0] is True:
            list_subscriptions[0] = False
            bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*üîï', reply_markup=main_menu(), parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, '*–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç—É!*üôÑ', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üíÉ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ‚úÖ')
def start(message):
    global list_subscriptions
    if list_subscriptions[1] is False:
        list_subscriptions[1] = True
        bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!*üîî', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '*–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!ü§∑‚Äç‚ôÇÔ∏è*', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üíÉ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ‚ùå')
def start(message):
    global list_subscriptions
    global list_schedule
    if list_schedule is True:
        bot.send_message(message.chat.id, f'*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—ã–∫–ª –∞–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫—É!*‚òù', reply_markup=main_menu(),
                         parse_mode="Markdown")
    else:
        if list_subscriptions[1] is True:
            list_subscriptions[1] = False
            bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*üîï', reply_markup=main_menu(), parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, '*–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç—É!*üôÑ', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üí∞–ë–∏–∑–Ω–µ—Å‚úÖ')
def start(message):
    global list_subscriptions
    if list_subscriptions[2] is False:
        list_subscriptions[2] = True
        bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!*üîî', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '*–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!ü§∑‚Äç‚ôÇÔ∏è*', reply_markup=main_menu(), parse_mode="Markdown")



@bot.message_handler(func=lambda message: message.text == 'üí∞–ë–∏–∑–Ω–µ—Å‚ùå')
def start(message):
    global list_subscriptions
    global list_schedule
    if list_schedule is True:
        bot.send_message(message.chat.id, f'*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—ã–∫–ª –∞–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫—É!*‚òù', reply_markup=main_menu(),
                         parse_mode="Markdown")
    else:
        if list_subscriptions[2] is True:
            list_subscriptions[2] = False
            bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*üîï', reply_markup=main_menu(), parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, '*–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç—É!*üôÑ', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == '‚öΩ–°–ø–æ—Ä—Ç‚úÖ')
def start(message):
    global list_subscriptions
    if list_subscriptions[3] is False:
        list_subscriptions[3] = True
        bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!*üîî', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '*–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!ü§∑‚Äç‚ôÇÔ∏è*', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == '‚öΩ–°–ø–æ—Ä—Ç‚ùå')
def start(message):
    global list_subscriptions
    global list_schedule
    if list_schedule is True:
        bot.send_message(message.chat.id, f'*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—ã–∫–ª –∞–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫—É!*‚òù', reply_markup=main_menu(),
                         parse_mode="Markdown")
    else:
        if list_subscriptions[3] is True:
            list_subscriptions[3] = False
            bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*üîï', reply_markup=main_menu(), parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, '*–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç—É!*üôÑ', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üìà–≠–∫–æ–Ω–æ–º–∏–∫–∞‚úÖ')
def start(message):
    global list_subscriptions
    if list_subscriptions[4] is False:
        list_subscriptions[4] = True
        bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!*üîî', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '*–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!ü§∑‚Äç‚ôÇÔ∏è*', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üìà–≠–∫–æ–Ω–æ–º–∏–∫–∞‚ùå')
def start(message):
    global list_subscriptions
    global list_schedule
    if list_schedule is True:
        bot.send_message(message.chat.id, f'*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—ã–∫–ª –∞–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫—É!*‚òù', reply_markup=main_menu(),
                         parse_mode="Markdown")
    else:
        if list_subscriptions[4] is True:
            list_subscriptions[4] = False
            bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*üîï', reply_markup=main_menu(), parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, '*–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç—É!*üôÑ', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üá∑üá∫–ü–æ–ª–∏—Ç–∏–∫–∞‚úÖ')
def start(message):
    global list_subscriptions
    if list_subscriptions[5] is False:
        list_subscriptions[5] = True
        bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!*üîî', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '*–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!ü§∑‚Äç‚ôÇÔ∏è*', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üá∑üá∫–ü–æ–ª–∏—Ç–∏–∫–∞‚ùå')
def start(message):
    global list_subscriptions
    global list_schedule
    if list_schedule is True:
        bot.send_message(message.chat.id, f'*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—ã–∫–ª –∞–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫—É!*‚òù', reply_markup=main_menu(),
                         parse_mode="Markdown")
    else:
        if list_subscriptions[5] is True:
            list_subscriptions[5] = False
            bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*üîï', reply_markup=main_menu(), parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, '*–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç—É!*üôÑ', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üß¨–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏‚úÖ')
def start(message):
    global list_subscriptions
    if list_subscriptions[6] is False:
        list_subscriptions[6] = True
        bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!*üîî', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '*–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!ü§∑‚Äç‚ôÇÔ∏è*', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üß¨–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏‚ùå')
def start(message):
    global list_subscriptions
    global list_schedule
    if list_schedule is True:
        bot.send_message(message.chat.id, f'*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—ã–∫–ª –∞–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫—É!*‚òù', reply_markup=main_menu(),
                         parse_mode="Markdown")
    else:
        if list_subscriptions[6] is True:
            list_subscriptions[6] = False
            bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*üîï', reply_markup=main_menu(), parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, '*–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç—É!*üôÑ', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üåç–ú–∏—Ä‚úÖ')
def start(message):
    global list_subscriptions
    if list_subscriptions[7] is False:
        list_subscriptions[7] = True
        bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!*üîî', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '*–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!ü§∑‚Äç‚ôÇÔ∏è*', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == 'üåç–ú–∏—Ä‚ùå')
def start(message):
    global list_subscriptions
    global list_schedule
    if list_schedule is True:
        bot.send_message(message.chat.id, f'*–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—ã–∫–ª –∞–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫—É!*‚òù', reply_markup=main_menu(),
                         parse_mode="Markdown")
    else:
        if list_subscriptions[7] is True:
            list_subscriptions[7] = False
            bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*üîï', reply_markup=main_menu(), parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, '*–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç—É!*üôÑ', reply_markup=main_menu(), parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == "‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
def handle_buttons(message):
    global list_schedule
    bot.send_message(message.chat.id, f'*–≠—Ç–æ—Ç –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –º–Ω–æ—é –≤ —Ü–µ–ª—è—Ö –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ —è–∑—ã–∫–µ*\n'
                                      f'*Python. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ —Ç. 8-953-749-0060 –û–ª–µ–≥*\n'
                                      f'\n', parse_mode="Markdown")
    bot.send_message(message.chat.id, f'*–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:*\n', parse_mode="Markdown")
    info_subscription = info_help_subscription()
    if info_subscription is False:
        bot.send_message(message.chat.id, f'*–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç!üòü*\n', parse_mode="Markdown")
    else:
        for i in range(len(info_subscription)):
            bot.send_message(message.chat.id, f'*{info_subscription[i][0]} - {info_subscription[i][1]}*', parse_mode="Markdown")
    if list_schedule is False:
        bot.send_message(message.chat.id, f'*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!üòü*\n', reply_markup=main_menu(), parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, f'*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!‚úÖ*\n', reply_markup=main_menu(), parse_mode="Markdown")


list_subscriptions = [False, False, False, False, False, False, False, False]


def info_help_subscription():
    global list_subscriptions
    global list_schedule
    title_subscriptions = ["–¢–û–ü –Ω–æ–≤–æ—Å—Ç–∏", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", "–ë–∏–∑–Ω–µ—Å", "–°–ø–æ—Ä—Ç", "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–ü–æ–ª–∏—Ç–∏–∫–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                           "–ú–∏—Ä"]
    not_subscription = [False, False, False, False, False, False, False, False]
    info_subscription = []
    if list_subscriptions == not_subscription:
        return False
    else:
        for i, j in zip(title_subscriptions, list_subscriptions):
            if j is True:
                info_subscription.append((i, "‚úÖ"))
        return info_subscription


@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    bot.send_message(message.chat.id, "*–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!*üôÑ", reply_markup=main_menu(), parse_mode="Markdown")


bot.polling()