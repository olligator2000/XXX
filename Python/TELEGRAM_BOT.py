# BOT_API = "7770590397:AAHBSzmBrZLiZxYe5JJHTh-2QvTm2K1I3r8"
#
# import telebot
# from telebot.types import ReplyKeyboardMarkup
#
# bot = telebot.TeleBot(BOT_API)
#
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     bot.send_message(message.chat.id, "üòé‚ï≠‚à©‚ïÆ( ‚Ä¢ÃÄ_‚Ä¢ÃÅ )‚ï≠‚à©‚ïÆ–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!‚ï≠‚à©‚ïÆ( ‚Ä¢ÃÄ_‚Ä¢ÃÅ )‚ï≠‚à©‚ïÆüòé")
#
#
# @bot.message_handler(commands=['help'])
# def help_command(message):
#     bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help")
#
#
# @bot.message_handler(func=lambda message: True)
# def unknown_command(message):
#     # bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
#     bot.send_message(message.chat.id, message.text)
#     bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}")
#     print(message)
#
#
# bot.polling()

##################################################### –ú–ï–ù–Æ —Å –ö–ù–û–ü–ö–ê–ú–ò_–≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# BOT_API = "7770590397:AAHBSzmBrZLiZxYe5JJHTh-2QvTm2K1I3r8"
#
#
# import telebot
# from telebot.types import ReplyKeyboardMarkup, KeyboardButton
#
#
# bot = telebot.TeleBot(BOT_API)
#
#
# def main_menu():
#     markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
#     button_1 = KeyboardButton('–û –±–æ—Ç–µ')
#     button_2 = KeyboardButton('–ü–æ–º–æ—â—å')
#     button_3 = KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç')
#     markup.add(button_1, button_2, button_3)
#     return markup
#
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     bot.send_message(message.chat.id, "üòé‚ï≠‚à©‚ïÆ( ‚Ä¢ÃÄ_‚Ä¢ÃÅ )‚ï≠‚à©‚ïÆ–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!‚ï≠‚à©‚ïÆ( ‚Ä¢ÃÄ_‚Ä¢ÃÅ )‚ï≠‚à©‚ïÆüòé", reply_markup=main_menu())
#
#
# @bot.message_handler(commands=['help'])
# def help_command(message):
#     bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help")
#
#
# @bot.message_handler(func=lambda message: True)
# def unknown_command(message):
#     # bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
#     bot.send_message(message.chat.id, message.text)
#     bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}")
#     print(message)
#
#
# @bot.message_handler(func=lambda message: message.text in ['–û –±–æ—Ç–µ', '–ü–æ–º–æ—â—å', '–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç'])
# def handler_buttons(message):
#     if message.text == '–û –±–æ—Ç–µ':
#         bot.send_message(message.chat_id, "–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
#     elif message.text == '–ü–æ–º–æ—â—å':
#         bot.send_message(message.chat_id, "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏")
#     elif message.text == '–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç':
#         bot.send_message(message.chat_id, "–§–∞–∫—Ç")
#
#
# bot.polling()


##################################################### –ú–ï–ù–Æ —Å –ö–ù–û–ü–ö–ê–ú–ò_–≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

# BOT_API = "7770590397:AAHBSzmBrZLiZxYe5JJHTh-2QvTm2K1I3r8"
#
#
# import telebot
# from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
#
#
# bot = telebot.TeleBot(BOT_API)
#
#
# def inline_menu():
#     markup = InlineKeyboardMarkup(row_width=2)
#     button_1 = InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –¢–µ–ª–µ–±–æ—Ç:', url="https://pypi.org/project/pyTelegramBotAPI/")
#     button_2 = InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –¢–µ–ª–µ–±–æ—Ç:', url="https://avatars.mds.yandex.net/get-mpic/1571231/img_id779278418351969261.jpeg/orig")
#     button_3 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='info')
#     button_4 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='info')
#     button_5 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='info')
#     button_6 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='info')
#     button_7 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='info')
#     button_8 = InlineKeyboardButton('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', callback_data='info')
#     markup.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8)
#     return markup
#
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     bot.send_message(message.chat.id, "üòé‚ï≠‚à©‚ïÆ( ‚Ä¢ÃÄ_‚Ä¢ÃÅ )‚ï≠‚à©‚ïÆ–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!‚ï≠‚à©‚ïÆ( ‚Ä¢ÃÄ_‚Ä¢ÃÅ )‚ï≠‚à©‚ïÆüòé")
#
#
# @bot.message_handler(commands=['help'])
# def help_command(message):
#     bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help")
#
#
# @bot.message_handler(commands=['menu'])
# def menu(message):
#     bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_menu())
#
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback_query(call):
#     if call.data == "info":
#         bot.send_message(call.message.chat.id, "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –Ω–∞ Python")
#
#
# bot.polling()


####################################################### –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤

# import telebot
# import requests
#
# from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
# from telebot.types import ReplyKeyboardMarkup, KeyboardButton
#
# BOT_API = "7683989927:AAExSrCaEwgYo_90HFYUVIgn5DIWmJTarjk"
# OMDB_API_KEY = "caf5b564"
#
# bot = telebot.TeleBot(BOT_API)
#
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     bot.send_message(message.chat.id, "üòé–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.üòé\n"
#                                         "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!")
#
#
# def get_movie_info(title):
#     url = f"http://www.omdbapi.com/?t={title}&apikey={OMDB_API_KEY}"
#     response = requests.get(url)
#     data = response.json()
#
#     if data.get("Response") == "True":
#         movie_info = (
#             f"üé• *{data['Title']}* *({data['Year']})*\n"
#             f"üåü *–†–µ–π—Ç–∏–Ω–≥:* {data['imdbRating']}\n"
#             f"üé¨ *–ñ–∞–Ω—Ä:* {data['Genre']}\n"
#             f"üë§ *–†–µ–∂–∏—Å—Å–µ—Ä:* {data['Genre']}\n"
#             f"üëΩ *–ê–∫—Ç–µ—Ä—ã:* {data['Actors']}\n"
#             f"üí¨ *–û–ø–∏—Å–∞–Ω–∏–µ:* {data['Plot']}\n"
#         )
#         poster = data.get("Poster", "")
#         return movie_info, poster
#     else:
#         return "–§–∏–ª—å–º –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω!", None
#
#
# @bot.message_handler(func=lambda message: True)
# def search_movie(message):
#     movie_info, poster = get_movie_info(message.text)
#     if poster and poster != "N/A":
#         bot.send_photo(message.chat.id, poster, caption=movie_info, parse_mode="Markdown")
#     else:
#         bot.send_message(message.chat.id, movie_info, parse_mode="Markdown")
#
#
# bot.polling()


####################################################### –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞

# import telebot
# import requests
# from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
#
# BOT_API = "7683989927:AAExSrCaEwgYo_90HFYUVIgn5DIWmJTarjk"
# OMDB_API_KEY = "caf5b564"
#
# bot = telebot.TeleBot(BOT_API)
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     markup = InlineKeyboardMarkup()
#     button_title = InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞", callback_data='search_by_title')
#     button_year = InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞", callback_data='search_by_year')
#     markup.add(button_title, button_year)
#
#     bot.send_message(message.chat.id, "üòé–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.üòé\n"
#                                         "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:", reply_markup=markup)
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback_query(call):
#     if call.data == 'search_by_title':
#         bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
#         bot.answer_callback_query(call.id)
#     elif call.data == 'search_by_year':
#         bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞:")
#         bot.answer_callback_query(call.id)
#
# def get_movie_info(title):
#     url = f"http://www.omdbapi.com/?t={title}&apikey={OMDB_API_KEY}"
#     response = requests.get(url)
#     data = response.json()
#
#     if data.get("Response") == "True":
#         movie_info = (
#             f"üé• *{data['Title']}* *({data['Year']})*\n"
#             f"üåü *–†–µ–π—Ç–∏–Ω–≥:* {data['imdbRating']}\n"
#             f"üé¨ *–ñ–∞–Ω—Ä:* {data['Genre']}\n"
#             f"üë§ *–†–µ–∂–∏—Å—Å–µ—Ä:* {data['Director']}\n"
#             f"üëΩ *–ê–∫—Ç–µ—Ä—ã:* {data['Actors']}\n"
#             f"üí¨ *–û–ø–∏—Å–∞–Ω–∏–µ:* {data['Plot']}\n"
#         )
#         poster = data.get("Poster", "")
#         return movie_info, poster
#     else:
#         return "–§–∏–ª—å–º –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω!", None
#
# @bot.message_handler(func=lambda message: True)
# def search_movie(message):
#     # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ—á—å –≥–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#     try:
#         year = int(message.text)
#         # –ó–¥–µ—Å—å —è –¥–æ–±–∞–≤–ª—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ–¥—É. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ API, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ñ–∏–ª—å–º—ã –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥
#         bot.send_message(message.chat.id, f"–ò—â—É —Ñ–∏–ª—å–º—ã, –≤—ã–ø—É—â–µ–Ω–Ω—ã–µ –≤ {year}...")
#         # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≥–æ–¥—É
#     except ValueError:
#         # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥–æ–¥, —Ç–æ –∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞
#         movie_info, poster = get_movie_info(message.text)
#         if poster and poster != "N/A":
#             bot.send_photo(message.chat.id, poster, caption=movie_info, parse_mode="Markdown")
#         else:
#             bot.send_message(message.chat.id, movie_info, parse_mode="Markdown")
#
# bot.polling()


####################################################### –ë–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã


# import telebot
# import requests
# from telebot.types import ReplyKeyboardMarkup, KeyboardButton
#
#
# BOT_API = "7770590397:AAHBSzmBrZLiZxYe5JJHTh-2QvTm2K1I3r8"
# WEATHER_API_KEY = "b73eeacce06afd66ec194738c9a4e57d"
#
# bot = telebot.TeleBot(BOT_API)
#
#
# def main_menu():
#     markup = ReplyKeyboardMarkup(row_width=2)
#     button_1 = KeyboardButton("–ú–æ—Å–∫–≤–∞")
#     button_2 = KeyboardButton("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
#     button_3 = KeyboardButton("–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥")
#     markup.add(button_1, button_2, button_3)
#     return markup
#
#
# def get_weather(city):
#     url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&appid={WEATHER_API_KEY}'
#     response = requests.get(url).json()
#
#     if response.get("main"):
#         return (
#             f'–ì–æ—Ä–æ–¥: {city}\n'
#             f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {response["main"]["temp"]}¬∞C\n'
#             f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {response["main"]["humidity"]}%\n'
#             f'–í–µ—Ç–µ—Ä: {response["wind"]["speed"]}–º/—Å\n'
#             f'–î–∞–≤–ª–µ–Ω–∏–µ: {response["main"]["pressure"]}—Ä—Ç.—Å—Ç.\n'
#         )
#     else:
#         return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
#
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     bot.send_message(message.chat.id, "üòé–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É.üòé\n"
#                                         "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=main_menu())
#
#
# @bot.message_handler(func=lambda message: message.text in ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"])
# def handle_buttons(message):
#     city = message.text
#     bot.send_message(message.chat.id, get_weather(city))
#
#
# @bot.message_handler(func=lambda message: message.text == "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥")
# def handle_buttons(message):
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
#     bot.register_next_step_handler(message, send_weather)
#
#
# def send_weather(message):
#     city = message.text
#     bot.send_message(message.chat.id, get_weather(city))
#
#
# bot.polling()

###########################################################################
###########################################################################
###########################################################################

# 3. –ë–æ—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ë–æ—Ç –∏—â–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (API: NewsAPI)
# ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º—ã (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Å–ø–æ—Ä—Ç, —ç–∫–æ–Ω–æ–º–∏–∫–∞)
# ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
# ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è/–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è)
# ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π (Google Translate API)
# –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫—Ä—É—á–µ?
# ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é GPT API.
# ‚Ä¢ –°–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π (pyttsx3).
# ‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.

from datetime import date, timedelta
import telebot
import requests
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from newsdataapi import NewsDataApiClient

BOT_API = "7770590397:AAHBSzmBrZLiZxYe5JJHTh-2QvTm2K1I3r8"
NEWS_API_KEY = "pub_740976a50713043bac6ec9aa65409f1ec42e6"

bot = telebot.TeleBot(BOT_API)

today = date.today()
yesterday = today - timedelta(days=1)
formatted_date_today = today.strftime("%Y-%m-%d")
formatted_date_yesterday = yesterday.strftime("%Y-%m-%d")


def main_menu():
    markup = ReplyKeyboardMarkup(row_width=2)
    button_1 = KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
    button_2 = KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
    button_3 = KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã")
    button_4 = KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–µ–º")
    button_5 = KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ")
    button_6 = KeyboardButton("–í–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π")
    button_7 = KeyboardButton("–í—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π")
    button_8 = KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    markup.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7, button_8)
    return markup


def main_menu_subscription():
    markup = ReplyKeyboardMarkup(row_width=2)
    button_1 = KeyboardButton("–ë–∏–∑–Ω–µ—Å")
    button_2 = KeyboardButton("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ")
    button_3 = KeyboardButton("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
    button_4 = KeyboardButton("–°–ø–æ—Ä—Ç")
    button_5 = KeyboardButton("–≠–∫–æ–Ω–æ–º–∏–∫–∞")
    button_6 = KeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞")
    button_7 = KeyboardButton("–ù–∞–∑–∞–¥‚Ü©Ô∏è")
    markup.add(button_1, button_2, button_3, button_4, button_5, button_6, button_7)
    return markup


def latest_news():
    url = f'https://newsdata.io/api/1/latest?apikey={NEWS_API_KEY}&country=ru&language=ru'
    response = requests.get(url).json()
    keys = response["results"]

    for i in range(len(keys)):
        dt_string = keys[i]["pubDate"]
        if keys[i]["category"] == "top" or dt_string[:10] == formatted_date_today:
            article_info = (
                f'*–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:* {keys[i]["title"]}\n'
                f'*–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫:* {keys[i]["link"]}\n'
                f'*–ê–≤—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏:* {keys[i]["creator"]}\n'
                f'*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {keys[i]["pubDate"]}\n'
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {keys[i]["category"]}\n'
            )
            poster = keys[i]["image_url"]
            return article_info, poster
        else:
            return "–°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!"


def key_word_news(key_word):
    url = f'https://newsdata.io/api/1/latest?q={key_word}&apikey={NEWS_API_KEY}&country=ru&language=ru'
    response = requests.get(url).json()
    keys = response["results"]

    for i in range(len(keys)):
        article_info = (
            f'*–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:* {keys[i]["title"]}\n'
            f'*–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫:* {keys[i]["link"]}\n'
            f'*–ê–≤—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏:* {keys[i]["creator"]}\n'
            f'*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {keys[i]["pubDate"]}\n'
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {keys[i]["category"]}\n'
        )
        poster = keys[i]["image_url"]
        return article_info, poster
    else:
        return "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"


def latest_news_subscription(*message):
    url = f'https://newsdata.io/api/1/latest?apikey={NEWS_API_KEY}&country=ru&language=ru'
    response = requests.get(url).json()
    keys = response["results"]

    for i in range(len(keys)):
        if keys[i]["category"] == ["sports" if sports is True else False] or keys[i]["category"] == ["sports" if sports is True else False] or:
            article_info = (
                f'*–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:* {keys[i]["title"]}\n'
                f'*–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫:* {keys[i]["link"]}\n'
                f'*–ê–≤—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏:* {keys[i]["creator"]}\n'
                f'*–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {keys[i]["pubDate"]}\n'
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {keys[i]["category"]}\n'
            )
            poster = keys[i]["image_url"]
            return article_info, poster
        else:
            return "–°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!"


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üòé–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.üòé\n"
                                      "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:\n", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã")
def subscription(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n", reply_markup=main_menu_subscription())


@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
def search_article(message):
    try:
        article_info, poster = latest_news()
        if poster and poster != "null":
            bot.send_photo(message.chat.id, poster, caption=article_info, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, article_info, parse_mode="Markdown")
    except:
        bot.send_message(message.chat.id, "–°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!", parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
def handle_buttons(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(message, send_news)


def send_news(message):
    news = message.text
    bot.send_message(message.chat.id, key_word_news(news))


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è')
def start(message):
    bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã")
def handle_buttons(message):
    bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:")
    bot.register_next_step_handler(message, send_news_subscriptions)


def send_news_subscriptions(message):
    subscriptions = [message.text]
    if "–ù–∞—É–∫–∞" in subscriptions:
        science = True
    else:
        science = False
    if "–ú—É–∑—ã–∫–∞" in subscriptions:
        music = True
    else:
        music = False
    if "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" in subscriptions:
        technology = True
    else:
        technology = False
    if "–°–ø–æ—Ä—Ç" in subscriptions:
        sports = True
    else:
        sports = False
    if "–≠–∫–æ–Ω–æ–º–∏–∫–∞" in subscriptions:
        economics = True
    if "–ü–æ–ª–∏—Ç–∏–∫–∞" in subscriptions:
        politics = True
    bot.send_message(message.chat.id, latest_news_subscription(subscriptions))





bot.polling()
